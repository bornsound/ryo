name: Build Ryo Currency with AppleClang and Clang 10

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13

    steps:
      - name: Set up Xcode 14.1 (AppleClang 14.0.0)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.1'

      - name: Ensure proper Xcode CLI tools
        run: |
          sudo xcode-select -s /Applications/Xcode_14.1.app/Contents/Developer
          xcodebuild -version
          xcrun --find clang

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev
          submodules: recursive

      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install pkg-config unbound libsodium miniupnpc hidapi xz readline expat libunwind-headers libpgm doxygen graphviz blake3 fmt hiredis xxhash ccache
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "READLINE_ROOT=/usr/local/opt/readline" >> $GITHUB_ENV

      - name: Install OpenSSL 1.1.1
        run: |
          curl -L https://www.openssl.org/source/openssl-1.1.1w.tar.gz -o openssl-1.1.1w.tar.gz
          tar -xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          ./config --prefix=/usr/local/openssl-1.1.1 --openssldir=/usr/local/openssl-1.1.1 no-shared
          make -j$(sysctl -n hw.ncpu)
          sudo make install
          echo "OPENSSL_ROOT_DIR=/usr/local/openssl-1.1.1" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/usr/local/openssl-1.1.1:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

      - name: Install CMake 3.31.6
        run: |
          brew uninstall cmake || true
          curl -L https://github.com/Kitware/CMake/releases/download/v3.31.6/cmake-3.31.6.tar.gz -o cmake-3.31.6.tar.gz
          tar -xzf cmake-3.31.6.tar.gz
          cd cmake-3.31.6
          ./bootstrap
          make -j$(sysctl -n hw.ncpu)
          sudo make install
          /usr/local/bin/cmake --version

      - name: Verify compiler C++14 support
        run: |
          echo "#include <memory>" > test.cpp
          echo "int main() { std::unique_ptr<int> ptr = std::make_unique<int>(42); return 0; }" >> test.cpp
          clang++ -std=gnu++14 -o test test.cpp
          ./test
          rm test.cpp test

      - name: Build and install ZeroMQ 4.3.5 (static)
        run: |
          curl -L https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz -o zeromq-4.3.5.tar.gz
          tar -xzf zeromq-4.3.5.tar.gz
          cd zeromq-4.3.5
          sed -i '' '/#define CLOCK_REALTIME 0/d' src/clock.hpp || true
          ./configure --prefix=/usr/local --enable-static --disable-shared --disable-tipc \
            CC=clang CXX=clang++ \
            CFLAGS="-Wno-error -Wno-error=packed-not-aligned" \
            CXXFLAGS="-std=gnu++14 -Wno-error -Wno-error=packed-not-aligned"
          make -j$(sysctl -n hw.ncpu)
          sudo make install

      - name: Install cppzmq
        run: |
          git clone https://github.com/zeromq/cppzmq.git
          cd cppzmq
          git checkout v4.9.0
          sudo cp zmq.hpp /usr/local/include/
          echo "ZMQ_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "ZMQ_LIBRARY=/usr/local/lib/libzmq.a" >> $GITHUB_ENV

      - name: Build and install Boost 1.72 (static)
        run: |
          curl -L https://archives.boost.io/release/1.72.0/source/boost_1_72_0.tar.gz -o boost_1_72_0.tar.gz
          tar -xzf boost_1_72_0.tar.gz
          cd boost_1_72_0
          ./bootstrap.sh --prefix=$HOME/boost-1.72 --with-toolset=clang
          ./b2 -j$(sysctl -n hw.ncpu) --without-python cxxflags="-std=gnu++14" link=static runtime-link=static toolset=clang install
          echo "BOOST_ROOT=$HOME/boost-1.72" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/boost-1.72:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

      - name: Fallback to Homebrew Boost
        run: |
          if [ ! -f "$HOME/boost-1.72/lib/libboost_system.a" ]; then
            brew install boost@1.72
            echo "BOOST_ROOT=/usr/local/opt/boost@1.72" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=/usr/local/opt/boost@1.72:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          fi

      - name: Set macOS deployment target to 10.15
        run: echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV

      - name: Download and install macOS 10.15 SDK
        run: |
          curl -L -o MacOSX10.15.sdk.tar.xz https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.15.sdk.tar.xz
          sudo tar -xf MacOSX10.15.sdk.tar.xz -C /Applications/Xcode_14.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/

      - name: Detect macOS 10.15 SDK path
        id: sdkpath
        run: |
          SDK_PATH="/Applications/Xcode_14.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk"
          echo "SDK_PATH=$SDK_PATH" >> $GITHUB_ENV
          echo "path=$SDK_PATH" >> $GITHUB_OUTPUT

      - name: Install Clang 10
        run: |
          curl -L https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/clang+llvm-10.0.0-x86_64-apple-darwin.tar.xz -o clang10.tar.xz
          tar -xf clang10.tar.xz
          CLANG_DIR=$(find . -type d -name "clang+llvm-10.0.0-x86_64-apple-darwin" -maxdepth 1 | head -n1)
          CLANG_DIR_ABS=$(realpath "$CLANG_DIR")
          echo "CLANG_DIR=$CLANG_DIR_ABS" >> $GITHUB_ENV
          echo "$CLANG_DIR_ABS/bin" >> $GITHUB_PATH
          $CLANG_DIR_ABS/bin/clang++ --version
          # Verify Clang 10 binaries exist
          ls -l $CLANG_DIR_ABS/bin/clang
          ls -l $CLANG_DIR_ABS/bin/clang++

      - name: Verify Clang 10 compatibility
        run: |
          echo "#include <stdio.h>" > test.c
          echo "int main() { printf(\"Hello, Clang 10!\\n\"); return 0; }" >> test.c
          $CLANG_DIR/bin/clang -mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }} -march=x86-64 -o test test.c
          ./test
          rm test.c test

      - name: Configure CMake for static build (Clang 10)
        run: |
          mkdir -p build
          cd build
          export CC=$CLANG_DIR/bin/clang
          export CXX=$CLANG_DIR/bin/clang++
          export CFLAGS="-mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }} -march=x86-64"
          export CXXFLAGS="-mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }} -march=x86-64 -std=gnu++14"
          /usr/local/bin/cmake .. \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_C_STANDARD=11 \
            -DCMAKE_CXX_STANDARD=14 \
            -DCMAKE_CXX_EXTENSIONS=ON \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
            -DCMAKE_OSX_SYSROOT=${{ env.SDK_PATH }} \
            -DCMAKE_OSX_ARCHITECTURES=x86_64 \
            -DUNBOUND_INCLUDE_DIR=/usr/local/include \
            -DUNBOUND_LIBRARY=/usr/local/lib/libunbound.a \
            -DZMQ_INCLUDE_DIR=${{ env.ZMQ_INCLUDE_DIR }} \
            -DZMQ_LIBRARY=${{ env.ZMQ_LIBRARY }} \
            -DREADLINE_ROOT=${{ env.READLINE_ROOT }} \
            -DReadline_INCLUDE_DIR=/usr/local/opt/readline/include \
            -DReadline_LIBRARY=/usr/local/opt/readline/lib/libreadline.a \
            -DOPENSSL_ROOT_DIR=${{ env.OPENSSL_ROOT_DIR }} \
            -DOPENSSL_INCLUDE_DIR=/usr/local/openssl-1.1.1/include \
            -DOPENSSL_CRYPTO_LIBRARY=/usr/local/openssl-1.1.1/lib/libcrypto.a \
            -DOPENSSL_SSL_LIBRARY=/usr/local/openssl-1.1.1/lib/libssl.a \
            -DBOOST_ROOT=${{ env.BOOST_ROOT }} \
            -DCMAKE_PREFIX_PATH=${{ env.CMAKE_PREFIX_PATH }} \
            -DBoost_USE_STATIC_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DSTATIC=ON \
            -DBoost_USE_STATIC_RUNTIME=ON \
            -DUSE_SINGLE_BUILDDIR=1 \
            -DARCH=x86-64 \
            -DCMAKE_POLICY_DEFAULT_CMP0057=NEW \
            -DBUILD_64=ON \
            -DCMAKE_EXE_LINKER_FLAGS="-framework CoreFoundation -framework IOKit -ldispatch"

      - name: Build Ryo (release-static-mac-x86_64 with Clang 10)
        run: |
          cd build
          make -j$(sysctl -n hw.ncpu)

      - name: Run tests (optional)
        run: |
          cd build
          make release-test
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ryo-binaries-clang10
          path: build/release/bin/

      - name: Print CMake logs and compiler info on failure
        if: failure()
        run: |
          cat build/CMakeFiles/CMakeOutput.log || true
          cat build/CMakeFiles/CMakeError.log || true
          find build -name "CMake*.log" -exec cat {} \;
          $CLANG_DIR/bin/clang++ --version
