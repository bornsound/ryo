name: Build Ryo Currency

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13 # macOS Ventura, x86_64 architecture

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev
          submodules: recursive

      - name: Install Xcode Command Line Tools
        run: |
          sudo xcode-select --install || true
          sudo xcode-select --reset
          xcode-select --print-path

      - name: Install Homebrew dependencies
        run: |
          brew uninstall gcc@10 || true
          brew install gcc@10
          brew install --formula cmake pkg-config unbound libsodium miniupnpc hidapi xz readline expat libunwind-headers libpgm doxygen graphviz ccache
          /usr/local/bin/gcc-10 --version
          ls -l /usr/local/lib/libunbound*
          ls -l /usr/local/opt/readline/include/readline/readline.h || true
          ls -l /usr/local/opt/readline/lib/libreadline.a || true
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/local/opt/libunwind-headers/include -I$(xcrun --show-sdk-path)/usr/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/usr/local/opt/libunwind-headers/lib -L$(xcrun --show-sdk-path)/usr/lib" >> $GITHUB_ENV
          echo "READLINE_ROOT=/usr/local/opt/readline" >> $GITHUB_ENV
          echo "READLINE_INCLUDE_DIR=/usr/local/opt/readline/include" >> $GITHUB_ENV
          echo "READLINE_LIBRARY=/usr/local/opt/readline/lib/libreadline.a" >> $GITHUB_ENV

      - name: Test compiler
        run: |
          echo "int main() { return 0; }" > test.c
          /usr/local/bin/gcc-10 test.c -o test
          ./test

      - name: Build and install ZeroMQ 4.3.5 (static)
        run: |
          curl -L https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz -o zeromq-4.3.5.tar.gz
          tar -xzf zeromq-4.3.5.tar.gz
          cd zeromq-4.3.5
          if grep -q "#define CLOCK_REALTIME" src/clock.hpp; then
            sed -i '' '/#define CLOCK_REALTIME 0/d' src/clock.hpp
          fi
          ./configure --prefix=/usr/local --enable-static --disable-shared --disable-tipc \
            CC=/usr/local/bin/gcc-10 CXX=/usr/local/bin/g++-10 \
            CFLAGS="$CPPFLAGS -Wno-error -Wno-error=packed-not-aligned" \
            CXXFLAGS="$CPPFLAGS -Wno-error -Wno-error=packed-not-aligned" \
            LDFLAGS="$LDFLAGS"
          make -j$(sysctl -n hw.ncpu)
          make install
          cd ..
          ls -l /usr/local/include/zmq.h
          ls -l /usr/local/lib/libzmq.a

      - name: Install cppzmq
        run: |
          git clone https://github.com/zeromq/cppzmq.git
          cd cppzmq
          git checkout v4.9.0
          cp zmq.hpp /usr/local/include/
          cd ..
          ls -l /usr/local/include/zmq.hpp
          echo "ZMQ_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "ZMQ_LIBRARY=/usr/local/lib/libzmq.a" >> $GITHUB_ENV
          echo "CMAKE_INCLUDE_PATH=/usr/local/include:$CMAKE_INCLUDE_PATH" >> $GITHUB_ENV
          echo "CMAKE_LIBRARY_PATH=/usr/local/lib:$CMAKE_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Fallback to Homebrew ZeroMQ with cppzmq
        run: |
          if [ ! -f /usr/local/include/zmq.hpp ] || [ ! -f /usr/local/lib/libzmq.a ]; then
            brew install zeromq
            brew unlink zeromq || true
            brew link zeromq --force
            git clone https://github.com/zeromq/cppzmq.git
            cd cppzmq
            git checkout v4.9.0
            cp zmq.hpp /usr/local/include/
            cd ..
            ls -l /usr/local/include/zmq.hpp || true
            ls -l /usr/local/lib/libzmq* || true
            echo "ZMQ_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
            echo "ZMQ_LIBRARY=/usr/local/lib/libzmq.a" >> $GITHUB_ENV
          fi

      - name: Inspect CMakeLists.txt and src/rpc/CMakeLists.txt
        run: |
          cat -n CMakeLists.txt | grep -A 20 -B 20 909
          cat -n src/CMakeLists.txt | grep -A 20 -B 20 102
          cat -n src/rpc/CMakeLists.txt | grep -A 20 -B 20 98
          ls -l src/rpc/* || true

      - name: Create build directory
        run: mkdir build && cd build

      - name: Configure CMake for static build
        run: |
          cd build
          cmake .. \
            -DCMAKE_C_COMPILER=/usr/local/bin/gcc-10 \
            -DCMAKE_CXX_COMPILER=/usr/local/bin/g++-10 \
            -DOPENSSL_ROOT_DIR=$HOME/openssl-1.1.1 \
            -DBOOST_ROOT=$HOME/boost-1.75 \
            -DUNBOUND_INCLUDE_DIR=/usr/local/include \
            -DUNBOUND_LIBRARY=/usr/local/lib/libunbound.a \
            -DZMQ_INCLUDE_DIR=$ZMQ_INCLUDE_DIR \
            -DZMQ_LIBRARY=$ZMQ_LIBRARY \
            -DREADLINE_ROOT=$READLINE_ROOT \
            -DREADLINE_INCLUDE_DIR=$READLINE_INCLUDE_DIR \
            -DREADLINE_LIBRARY=$READLINE_LIBRARY \
            -DCMAKE_BUILD_TYPE=Release \
            -DSTATIC=ON \
            -DBoost_USE_STATIC_RUNTIME=ON \
            -DUSE_SINGLE_BUILDDIR=1 \
            -DARCH=x86_64 \
            -DCMAKE_POLICY_DEFAULT_CMP0057=NEW \
            -DBUILD_64=ON \
            --trace-expand

      - name: Build Ryo (release-static-mac-x86_64)
        run: |
          cd build
          make release-static-mac-x86_64 -j$(sysctl -n hw.ncpu)

      - name: Run tests (optional)
        run: |
          cd build
          make release-test
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ryo-binaries
          path: build/release/bin/

      - name: Print config.log if ZeroMQ build fails
        run: |
          if [ ! -f /usr/local/include/zmq.h ]; then
            cat zeromq-4.3.5/config.log || true
          fi
        if: failure()
