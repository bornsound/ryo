name: Build Ryo Currency

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13 # macOS Ventura, x86_64 architecture

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev
          submodules: recursive

      - name: Install Xcode Command Line Tools
        run: |
          sudo xcode-select --install || true
          sudo xcode-select --reset
          xcode-select --print-path

      - name: Install Homebrew dependencies
        run: |
          brew uninstall gcc@10 || true
          brew install gcc@10
          brew install pkg-config unbound libsodium miniupnpc hidapi xz readline expat libunwind-headers libpgm doxygen graphviz
          brew install blake3 fmt hiredis xxhash
          brew install ccache
          /usr/local/bin/gcc-10 --version
          ls -l /usr/local/lib/libunbound*
          ls -l /usr/local/opt/readline/include/readline/readline.h || true
          ls -l /usr/local/opt/readline/lib/libreadline.a || true
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "READLINE_ROOT=/usr/local/opt/readline" >> $GITHUB_ENV

      - name: Install OpenSSL 1.1.1
        run: |
          curl -L https://www.openssl.org/source/openssl-1.1.1w.tar.gz -o openssl-1.1.1w.tar.gz
          tar -xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          ./config --prefix=/usr/local/openssl-1.1.1 --openssldir=/usr/local/openssl-1.1.1 no-shared
          make -j$(sysctl -n hw.ncpu)
          sudo make install
          cd ..
          ls -l /usr/local/openssl-1.1.1/lib/libssl.a
          ls -l /usr/local/openssl-1.1.1/lib/libcrypto.a
          echo "OPENSSL_ROOT_DIR=/usr/local/openssl-1.1.1" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/usr/local/openssl-1.1.1:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          rm -rf openssl-1.1.1w openssl-1.1.1w.tar.gz

      - name: Install CMake 3.31.6
        run: |
          brew uninstall cmake || true
          curl -L https://github.com/Kitware/CMake/releases/download/v3.31.6/cmake-3.31.6.tar.gz -o cmake-3.31.6.tar.gz
          tar -xzf cmake-3.31.6.tar.gz
          cd cmake-3.31.6
          ./bootstrap
          make -j$(sysctl -n hw.ncpu)
          sudo make install
          cd ..
          /usr/local/bin/cmake --version
          rm -rf cmake-3.31.6 cmake-3.31.6.tar.gz
          if ! /usr/local/bin/cmake --version | grep -q "3.31.6"; then
            echo "CMake 3.31.6 not installed correctly"
            exit 1
          fi

      - name: Verify compiler C++11 support
        run: |
          echo "#include <memory>" > test.cpp
          echo "int main() { std::unique_ptr<int> ptr = std::make_unique<int>(42); return 0; }" >> test.cpp
          /usr/local/bin/g++-10 -std=c++14 -o test test.cpp
          ./test
          /usr/local/bin/g++-10 --version
          /usr/local/bin/g++-10 -print-file-name=libstdc++.so
          rm test.cpp test

      - name: Build and install ZeroMQ 4.3.5 (static)
        run: |
          curl -L https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz -o zeromq-4.3.5.tar.gz
          tar -xzf zeromq-4.3.5.tar.gz
          cd zeromq-4.3.5
          if grep -q "#define CLOCK_REALTIME" src/clock.hpp; then
            sed -i '' '/#define CLOCK_REALTIME 0/d' src/clock.hpp
          fi
          ./configure --prefix=/usr/local --enable-static --disable-shared --disable-tipc \
            CC=/usr/local/bin/gcc-10 CXX=/usr/local/bin/g++-10 \
            CFLAGS="-Wno-error -Wno-error=packed-not-aligned" \
            CXXFLAGS="-std=c++11 -Wno-error -Wno-error=packed-not-aligned" \
            LDFLAGS=""
          make -j$(sysctl -n hw.ncpu)
          sudo make install
          cd ..
          ls -l /usr/local/include/zmq.h
          ls -l /usr/local/lib/libzmq.a
          rm -rf zeromq-4.3.5 zeromq-4.3.5.tar.gz

      - name: Install cppzmq
        run: |
          git clone https://github.com/zeromq/cppzmq.git
          cd cppzmq
          git checkout v4.9.0
          sudo cp zmq.hpp /usr/local/include/
          cd ..
          ls -l /usr/local/include/zmq.hpp
          echo "ZMQ_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "ZMQ_LIBRARY=/usr/local/lib/libzmq.a" >> $GITHUB_ENV
          echo "CMAKE_INCLUDE_PATH=/usr/local/include:$CMAKE_INCLUDE_PATH" >> $GITHUB_ENV
          echo "CMAKE_LIBRARY_PATH=/usr/local/lib:$CMAKE_LIBRARY_PATH" >> $GITHUB_ENV
          rm -rf cppzmq

      - name: Build and install Boost 1.75 (static)
        run: |
          curl -L https://archives.boost.io/release/1.75.0/source/boost_1_75_0.tar.gz -o boost_1_75_0.tar.gz
          tar -xzf boost_1_75_0.tar.gz
          cd boost_1_75_0
          ./bootstrap.sh --prefix=$HOME/boost-1.75
          ./b2 -j$(sysctl -n hw.ncpu) --without-python cxxflags="-std=c++11" link=static runtime-link=static install
          cd ..
          ls -l $HOME/boost-1.75/lib/libboost*.a
          echo "BOOST_ROOT=$HOME/boost-1.75" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/boost-1.75:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          rm -rf boost_1_75_0 boost_1_75_0.tar.gz

      - name: Fallback to Homebrew Boost
        run: |
          if [ ! -f $HOME/boost-1.75/lib/libboost_system.a ]; then
            brew install boost
            echo "BOOST_ROOT=/usr/local/opt/boost" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=/usr/local/opt/boost:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          fi
          ls -l /usr/local/opt/boost/lib/libboost*.a || true

      - name: Create build directory
        run: |
          mkdir build && cd build



      - name: Build Ryo (release-static-mac-x86_64)
        run: |
          cd build
          make release-static-mac-x86_64

      - name: Run tests (optional)
        run: |
          cd build
          make release-test
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ryo-binaries
          path: build/release/bin/

      - name: Print CMake logs on failure
        run: |
          cat CMakeFiles/CMakeOutput.log || true
          cat CMakeFiles/CMakeError.log || true
          find . -name "CMake*.log" -exec cat {} \;
        if: failure()
