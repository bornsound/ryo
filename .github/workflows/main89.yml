name: Build Ryo Ubuntu 22

on:
  push:
    branches: [ dev1 ]
  pull_request:
    branches: [ dev1 ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev1
          submodules: recursive

      - name: Verify CMakeLists.txt presence
        run: |
          if [ ! -f "CMakeLists.txt" ]; then
            echo "Error: CMakeLists.txt not found in the repository root!"
            ls -la
            git ls-files
            exit 1
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libunbound-dev libsodium-dev libminiupnpc-dev libhidapi-dev libreadline-dev libexpat1-dev libunwind-dev libpgm-dev doxygen graphviz libfmt-dev libhiredis-dev libxxhash-dev ccache
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Install OpenSSL 1.1.1
        run: |
          wget https://www.openssl.org/source/openssl-1.1.1w.tar.gz
          tar -xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          ./config --prefix=/usr/local/openssl-1.1.1 --openssldir=/usr/local/openssl-1.1.1 no-shared
          make -j$(nproc)
          sudo make install
          echo "OPENSSL_ROOT_DIR=/usr/local/openssl-1.1.1" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/usr/local/openssl-1.1.1:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

      - name: Install CMake 3.31.6
        run: |
          sudo apt-get remove --purge cmake -y || true
          wget https://github.com/Kitware/CMake/releases/download/v3.31.6/cmake-3.31.6.tar.gz
          tar -xzf cmake-3.31.6.tar.gz
          cd cmake-3.31.6
          ./bootstrap
          make -j$(nproc)
          sudo make install
          /usr/local/bin/cmake --version

      - name: Install GCC 10
        run: |
          sudo apt-get install -y gcc-10 g++-10
          echo "GCC_DIR=/usr" >> $GITHUB_ENV
          echo "/usr/bin" >> $GITHUB_PATH
          /usr/bin/g++-10 --version

      - name: Verify compiler C++14 support
        run: |
          echo "#include <memory>" > test.cpp
          echo "int main() { std::unique_ptr<int> ptr = std::make_unique<int>(42); return 0; }" >> test.cpp
          /usr/bin/g++-10 -std=gnu++14 -o test test.cpp
          ./test
          rm test.cpp test

      - name: Build and install ZeroMQ 4.3.5 (static)
        run: |
          wget https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz
          tar -xzf zeromq-4.3.5.tar.gz
          cd zeromq-4.3.5
          ./configure --prefix=/usr/local --enable-static --disable-shared --disable-tipc \
            CC=/usr/bin/gcc-10 CXX=/usr/bin/g++-10 \
            CFLAGS="-Wno-error -Wno-error=packed-not-aligned" \
            CXXFLAGS="-std=gnu++14 -Wno-error -Wno-error=packed-not-aligned"
          make -j$(nproc)
          sudo make install

      - name: Install cppzmq
        run: |
          git clone https://github.com/zeromq/cppzmq.git
          cd cppzmq
          git checkout v4.9.0
          sudo cp zmq.hpp /usr/local/include/
          echo "ZMQ_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "ZMQ_LIBRARY=/usr/local/lib/libzmq.a" >> $GITHUB_ENV

      - name: Install Boost 1.75 (static) with GCC
        run: |
          wget https://archives.boost.io/release/1.75.0/source/boost_1_75_0.tar.gz
          tar -xzf boost_1_75_0.tar.gz
          cd boost_1_75_0
          ./bootstrap.sh --prefix=$HOME/boost-1.75 --with-toolset=gcc
          ./b2 -j$(nproc) --without-python link=static runtime-link=static toolset=gcc install
          echo "BOOST_ROOT=$HOME/boost-1.75" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/boost-1.75:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

      - name: Fallback to system Boost
        run: |
          if [ ! -f "$HOME/boost-1.75/lib/libboost_system.a" ]; then
            sudo apt-get install -y libboost-all-dev
            echo "BOOST_ROOT=/usr" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=/usr:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          fi

      - name: Verify GCC 10 compatibility
        run: |
          echo "#include <stdio.h>" > test.c
          echo "int main() { printf(\"Hello, GCC 10!\\n\"); return 0; }" >> test.c
          /usr/bin/gcc-10 -o test test.c
          ./test
          rm test.c test

      - name: Configure CMake for static build (GCC 10)
        run: |
          mkdir -p build
          cd build
          export CC=/usr/bin/gcc-10
          export CXX=/usr/bin/g++-10
          export CFLAGS="-march=x86-64"
          export CXXFLAGS="-march=x86-64 -std=gnu++14"
          /usr/local/bin/cmake .. \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_C_STANDARD=11 \
            -DCMAKE_CXX_STANDARD=14 \
            -DCMAKE_CXX_EXTENSIONS=ON \
            -DUNBOUND_INCLUDE_DIR=/usr/include \
            -DUNBOUND_LIBRARY=/usr/lib/x86_64-linux-gnu/libunbound.a \
            -DZMQ_INCLUDE_DIR=${{ env.ZMQ_INCLUDE_DIR }} \
            -DZMQ_LIBRARY=${{ env.ZMQ_LIBRARY }} \
            -DREADLINE_ROOT=/usr \
            -DReadline_INCLUDE_DIR=/usr/include/readline \
            -DReadline_LIBRARY=/usr/lib/x86_64-linux-gnu/libreadline.a \
            -DOPENSSL_ROOT_DIR=${{ env.OPENSSL_ROOT_DIR }} \
            -DOPENSSL_INCLUDE_DIR=/usr/local/openssl-1.1.1/include \
            -DOPENSSL_CRYPTO_LIBRARY=/usr/local/openssl-1.1.1/lib/libcrypto.a \
            -DOPENSSL_SSL_LIBRARY=/usr/local/openssl-1.1.1/lib/libssl.a \
            -DBOOST_ROOT=${{ env.BOOST_ROOT }} \
            -DCMAKE_PREFIX_PATH=${{ env.CMAKE_PREFIX_PATH }} \
            -DBoost_USE_STATIC_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DSTATIC=ON \
            -DBoost_USE_STATIC_RUNTIME=ON \
            -DUSE_SINGLE_BUILDDIR=1 \
            -DARCH=x86-64 \
            -DCMAKE_POLICY_DEFAULT_CMP0057=NEW \
            -DBUILD_64=ON

      - name: Build Ryo (release-static-ubuntu-x86_64 with GCC 10)
        run: |
          cd build
          make -j$(nproc)

      - name: Run tests (optional)
        run: |
          cd build
          make release-test
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ryo-binaries-gcc10
          path: build/release/bin/

      - name: Print CMake logs and compiler info on failure
        if: failure()
        run: |
          cat build/CMakeFiles/CMakeOutput.log || true
          cat build/CMakeFiles/CMakeError.log || true
          find build -name "CMake*.log" -exec cat {} \;
          /usr/bin/g++-10 --version
