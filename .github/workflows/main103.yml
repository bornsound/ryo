name: Build Ry1113

on:
  push:
    branches: [ dev3 ]
  pull_request:
    branches: [ dev3 ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13

    steps:
      - name: Set up Xcode 14.1 (AppleClang 14.0.0)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '14.1'

      - name: Ensure proper Xcode CLI tools
        run: |
          sudo xcode-select -s /Applications/Xcode_14.1.app/Contents/Developer
          xcodebuild -version
          xcrun --find clang
          clang --version

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev3
          submodules: recursive

      - name: Install Homebrew dependencies
        run: |
          brew update
          brew install pkg-config unbound libsodium miniupnpc hidapi xz readline expat libunwind-headers libpgm doxygen graphviz blake3 fmt hiredis xxhash ccache
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "READLINE_ROOT=/usr/local/opt/readline" >> $GITHUB_ENV

      - name: Install OpenSSL 1.1.1
        run: |
          curl -L https://www.openssl.org/source/openssl-1.1.1w.tar.gz -o openssl-1.1.1w.tar.gz
          tar -xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w
          ./config --prefix=$HOME/openssl-1.1.1 --openssldir=$HOME/openssl-1.1.1 no-shared
          make -j$(sysctl -n hw.ncpu)
          make install
          echo "OPENSSL_ROOT_DIR=$HOME/openssl-1.1.1" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/openssl-1.1.1:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

      - name: Install CMake 3.31.6
        run: |
          brew uninstall cmake || true
          curl -L https://github.com/Kitware/CMake/releases/download/v3.31.6/cmake-3.31.6.tar.gz -o cmake-3.31.6.tar.gz
          tar -xzf cmake-3.31.6.tar.gz
          cd cmake-3.31.6
          ./bootstrap
          make -j$(sysctl -n hw.ncpu)
          sudo make install
          /usr/local/bin/cmake --version

      - name: Download and install macOS 10.15 SDK
        run: |
          curl -L -o MacOSX10.15.sdk.tar.xz https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.15.sdk.tar.xz
          sudo tar -xf MacOSX10.15.sdk.tar.xz -C /Applications/Xcode_14.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ || \
            { echo "Error: SDK extraction failed"; exit 1; }
          if [ ! -d "/Applications/Xcode_14.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk" ]; then
            echo "Error: macOS 10.15 SDK not found"
            exit 1
          fi
          echo "SDK_PATH=/Applications/Xcode_14.1.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk" >> $GITHUB_ENV

      - name: Verify SDK Path
        run: |
          echo "SDK_PATH is ${{ env.SDK_PATH }}"
          ls -l ${{ env.SDK_PATH }}

      - name: Build and install ZeroMQ 4.3.5 (static)
        run: |
          curl -L https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz -o zeromq-4.3.5.tar.gz
          tar -xzf zeromq-4.3.5.tar.gz
          cd zeromq-4.3.5
          sed -i '' '/#define CLOCK_REALTIME 0/d' src/clock.hpp || true
          ./configure --prefix=/usr/local --enable-static --disable-shared \
            CC=clang CXX=clang++ \
            CFLAGS="-mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }} -Wno-error -Wno-error=packed-not-aligned" \
            CXXFLAGS="-mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }} -std=gnu++14 -Wno-error -Wno-error=packed-not-aligned" \
            LDFLAGS="-mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }}" \
            PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
          make -j$(sysctl -n hw.ncpu)
          sudo make install
          sudo chmod 644 /usr/local/lib/libzmq.a /usr/local/lib/pkgconfig/libzmq.pc
          echo "ZMQ_INCLUDE_DIR=/usr/local/include" >> $GITHUB_ENV
          echo "ZMQ_LIBRARY=/usr/local/lib/libzmq.a" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

      - name: Verify ZeroMQ Installation
        run: |
          ls -l /usr/local/lib/libzmq.a
          ls -l /usr/local/include/zmq.h
          ls -l /usr/local/lib/pkgconfig/libzmq.pc
          echo "ZMQ_LIBRARY=$ZMQ_LIBRARY"
          echo "ZMQ_INCLUDE_DIR=$ZMQ_INCLUDE_DIR"
          pkg-config --libs --cflags libzmq || { echo "pkg-config failed for libzmq"; exit 1; }

      - name: Install cppzmq
        run: |
          git clone https://github.com/zeromq/cppzmq.git
          cd cppzmq
          git checkout v4.9.0
          sudo mkdir -p /usr/local/include
          sudo cp zmq.hpp /usr/local/include/
          sudo chmod 644 /usr/local/include/zmq.hpp
          ls -l /usr/local/include/zmq.hpp || { echo "Error: zmq.hpp not found in /usr/local/include"; exit 1; }

      - name: Install Boost 1.75 (static) with Clang
        run: |
          curl -L https://archives.boost.io/release/1.75.0/source/boost_1_75_0.tar.gz -o boost_1_75_0.tar.gz
          tar -xzf boost_1_75_0.tar.gz
          cd boost_1_75_0
          ./bootstrap.sh --prefix=$HOME/boost-1.75 --with-toolset=clang
          ./b2 -j$(sysctl -n hw.ncpu) --without-python link=static runtime-link=static toolset=clang install
          echo "BOOST_ROOT=$HOME/boost-1.75" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=$HOME/boost-1.75:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

      - name: Fallback to Homebrew Boost
        run: |
          if [ ! -f "$HOME/boost-1.75/lib/libboost_system.a" ]; then
            brew install boost
            echo "BOOST_ROOT=/usr/local/opt/boost" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=/usr/local/opt/boost:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          fi

      - name: Set macOS deployment target to 10.15
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV

      - name: Validate dependency paths
        run: |
          test -f $HOME/openssl-1.1.1/lib/libcrypto.a || { echo "libcrypto.a not found"; exit 1; }
          test -f /usr/local/lib/libzmq.a || { echo "libzmq.a not found"; exit 1; }
          test -f /usr/local/lib/libunbound.a || { echo "libunbound.a not found"; exit 1; }
          test -f /usr/local/include/zmq.hpp || { echo "zmq.hpp not found"; exit 1; }


      - name: Debug ZeroMQ CMake Detection
        run: |
          mkdir -p build
          cd build
          /usr/local/bin/cmake .. -LA | grep -i zmq || echo "No ZeroMQ variables found in CMake cache"

      - name: Install Clang 7.0.0
        run: |
          curl -L https://releases.llvm.org/7.0.0/clang+llvm-7.0.0-x86_64-apple-darwin.tar.xz -o clang7.tar.xz
          if [ ! -f clang7.tar.xz ]; then
            echo "Error: Failed to download Clang 7.0.0"
            exit 1
          fi
          tar -xf clang7.tar.xz
          CLANG_DIR=$(find . -type d -name "clang+llvm-7.0.0-x86_64-apple-darwin" -maxdepth 1 | head -n1)
          if [ -z "$CLANG_DIR" ]; then
            echo "Error: Clang 7.0.0 directory not found"
            exit 1
          fi
          CLANG_DIR_ABS=$(realpath "$CLANG_DIR")
          echo "CLANG_DIR=$CLANG_DIR_ABS" >> $GITHUB_ENV
          echo "$CLANG_DIR_ABS/bin" >> $GITHUB_PATH
          $CLANG_DIR_ABS/bin/clang++ --version

      - name: Verify Clang Installation
        run: |
          $CLANG_DIR/bin/clang --version
          $CLANG_DIR/bin/clang++ --version

      - name: Configure CMake for static build (Clang 7)
        run: |
          mkdir -p build
          cd build
          export CC=$CLANG_DIR/bin/clang
          export CXX=$CLANG_DIR/bin/clang++
          export CFLAGS="-mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }} -march=x86-64"
          export CXXFLAGS="-mmacosx-version-min=10.15 -isysroot ${{ env.SDK_PATH }} -march=x86-64 -std=gnu++14"
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH
          /usr/local/bin/cmake .. \
            -DCMAKE_C_COMPILER=$CC \
            -DCMAKE_CXX_COMPILER=$CXX \
            -DCMAKE_C_STANDARD=11 \
            -DCMAKE_CXX_STANDARD=14 \
            -DCMAKE_CXX_EXTENSIONS=ON \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
            -DCMAKE_OSX_SYSROOT="${SDK_PATH}" \
            -DUNBOUND_INCLUDE_DIR=/usr/local/include \
            -DUNBOUND_LIBRARY=/usr/local/lib/libunbound.a \
            -DZMQ_INCLUDE_DIR=/usr/local/include \
            -DZMQ_LIBRARY=/usr/local/lib/libzmq.a \
            -DZeroMQ_INCLUDE_DIR=/usr/local/include \
            -DZeroMQ_LIBRARY=/usr/local/lib/libzmq.a \
            -DLIBZMQ_INCLUDE_DIR=/usr/local/include \
            -DLIBZMQ_LIBRARY=/usr/local/lib/libzmq.a \
            -DCPPZMQ_INCLUDE_DIR=/usr/local/include \
            -DZMQ_STATIC=ON \
            -DCMAKE_PREFIX_PATH=/usr/local:${CMAKE_PREFIX_PATH} \
            -DREADLINE_ROOT=${READLINE_ROOT} \
            -DReadline_INCLUDE_DIR=/usr/local/opt/readline/include \
            -DReadline_LIBRARY=/usr/local/opt/readline/lib/libreadline.a \
            -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR} \
            -DOPENSSL_INCLUDE_DIR=$HOME/openssl-1.1.1/include \
            -DOPENSSL_CRYPTO_LIBRARY=$HOME/openssl-1.1.1/lib/libcrypto.a \
            -DOPENSSL_SSL_LIBRARY=$HOME/openssl-1.1.1/lib/libssl.a \
            -DBoost_ROOT=${BOOST_ROOT} \
            -DBoost_USE_STATIC_LIBS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DSTATIC=ON \
            -DBoost_USE_STATIC_RUNTIME=ON \
            -DUSE_SINGLE_BUILDDIR=1 \
            -DARCH=x86-64 \
            -DCMAKE_POLICY_DEFAULT_CMP0057=NEW \
            -DCMAKE_POLICY_DEFAULT_CMP0167=NEW \
            -DBUILD_64=ON \
            -DCMAKE_EXE_LINKER_FLAGS="-framework CoreFoundation -framework IOKit -ldispatch"

      - name: Build Ryo (release-static-mac-x86_64 with Clang 7)
        run: |
          cd build
          make -j$(sysctl -n hw.ncpu)

      - name: Run tests (optional)
        run: |
          cd build
          make release-test
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ryo-binaries-clang7
          path: build/release/bin/

      - name: Print CMake logs and compiler info on failure
        if: failure()
        run: |
          cat build/CMakeFiles/CMakeOutput.log || true
          cat build/CMakeFiles/CMakeError.log || true
          find build -name "CMake*.log" -exec cat {} \;
          cat zeromq-4.3.5/config.log || true
